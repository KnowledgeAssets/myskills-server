<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2014-2018 the original author or authors.
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
         http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<changelog xmlns="http://www.liquigraph.org/schema/1.0/liquigraph.xsd">
	<import resource="changelog.xml"/>
	<changeset id="demo-data-1" author="Dmitry Lebedko">
		<query>CREATE (:Skill {id: randomUUID(), name: 'Java', description: 'Java programming language.'})</query>
		<query>CREATE (:Skill {id: randomUUID(), name: 'Spring Boot', description: 'Spring Boot framework to develop applications in Java.'})</query>
		<query>CREATE (:Skill {id: randomUUID(), name: 'JavaScript', description: 'JavaScript programming language.'})</query>
		<query>CREATE (:Skill {id: randomUUID(), name: 'CSS', description: 'Cascading Style Sheets language.'})</query>
		<query>CREATE (:Skill {id: randomUUID(), name: 'HTML', description: 'Hypertext Markup Language for creating web pages and web applications.'})</query>
		<query>CREATE (:Skill {id: randomUUID(), name: 'Project Management'})</query>

		<query>CREATE (:SkillGroup {id: randomUUID(), name: 'Frontend', description: 'Programming languages and frameworks used in frontend development'})</query>
		<query>CREATE (:SkillGroup {id: randomUUID(), name: 'Backend', description: 'Programming languages and frameworks used in backend development'})</query>

		<query>MATCH (s:Skill {name: 'Java'}), (sg:SkillGroup {name: 'Backend'}) CREATE (s)-[:SKILL_GROUPS]->(sg)</query>
		<query>MATCH (s:Skill {name: 'Spring Boot'}), (sg:SkillGroup {name: 'Backend'}) CREATE (s)-[:SKILL_GROUPS]->(sg)</query>
		<query>MATCH (s:Skill {name: 'JavaScript'}), (sg:SkillGroup {name: 'Frontend'}) CREATE (s)-[:SKILL_GROUPS]->(sg)</query>
		<query>MATCH (s:Skill {name: 'CSS'}), (sg:SkillGroup {name: 'Frontend'}) CREATE (s)-[:SKILL_GROUPS]->(sg)</query>
		<query>MATCH (s:Skill {name: 'HTML'}), (sg:SkillGroup {name: 'Frontend'}) CREATE (s)-[:SKILL_GROUPS]->(sg)</query>

		<query>CREATE (:User {id: randomUUID(), firstName: 'Dmitry', lastName: 'Dmitry\'s surname', userName: 'dmle', email: 'dmle@mail.com', referenceId: randomUUID()})</query>
		<query>CREATE (:User {id: randomUUID(), firstName: 'Sveta', lastName: 'Sveta\'s surname', userName: 'sviv', email: 'sviv@mail.com', referenceId: randomUUID()})</query>
		<query>CREATE (:User {id: randomUUID(), firstName: 'Franziska', lastName: 'Franziska\'s surname', userName: 'frwt', email: 'frwt@mail.com', referenceId: randomUUID()})</query>
		<query>CREATE (:User {id: randomUUID(), firstName: 'Rainer', lastName: 'Rainer\'s surname', userName: 'rju', email: 'rju@mail.com', referenceId: randomUUID()})</query>
		<query>CREATE (:User {id: randomUUID(), firstName: 'Phoebe', lastName: 'Phoebe\'s surname', userName: 'phin', email: 'phin@mail.com', referenceId: randomUUID()})</query>
		<query>CREATE (:User {id: randomUUID(), firstName: 'First user', lastName: 'First user\'s surname', userName: 'us1', email: 'us1@mail.com', referenceId: randomUUID()})</query>
		<query>CREATE (:User {id: randomUUID(), firstName: 'Second user', lastName: 'Second user\'s surname', userName: 'us2', email: 'us2@mail.com', referenceId: randomUUID()})</query>
		<query>CREATE (:User {id: randomUUID(), firstName: 'Third user', lastName: 'Third user\'s surname', userName: 'us3', email: 'us3@mail.com', referenceId: randomUUID()})</query>

		<query>MATCH (u:User {userName: 'dmle'}), (s:Skill {name: 'Spring Boot'}) CREATE (u)-[:RELATED_TO {currentLevel: 1, desiredLevel: 2, priority: 2}]->(s)</query>
		<query>MATCH (u:User {userName: 'dmle'}), (s:Skill {name: 'Java'}) CREATE (u)-[:RELATED_TO {currentLevel: 2, desiredLevel: 3, priority: 1}]->(s)</query>
		<query>MATCH (u:User {userName: 'dmle'}), (s:Skill {name: 'JavaScript'}) CREATE (u)-[:RELATED_TO {currentLevel: 1, desiredLevel: 2, priority: 2}]->(s)</query>
		<query>MATCH (u:User {userName: 'sviv'}), (s:Skill {name: 'Spring Boot'}) CREATE (u)-[:RELATED_TO {currentLevel: 1, desiredLevel: 2, priority: 2}]->(s)</query>
		<query>MATCH (u:User {userName: 'sviv'}), (s:Skill {name: 'Java'}) CREATE (u)-[:RELATED_TO {currentLevel: 2, desiredLevel: 3, priority: 1}]->(s)</query>
		<query>MATCH (u:User {userName: 'sviv'}), (s:Skill {name: 'JavaScript'}) CREATE (u)-[:RELATED_TO {currentLevel: 2, desiredLevel: 3, priority: 1}]->(s)</query>
		<query>MATCH (u:User {userName: 'frwt'}), (s:Skill {name: 'Project Management'}) CREATE (u)-[:RELATED_TO {currentLevel: 3, desiredLevel: 4, priority: 1}]->(s)</query>
		<query>MATCH (u:User {userName: 'rju'}), (s:Skill {name: 'Project Management'}) CREATE (u)-[:RELATED_TO {currentLevel: 3, desiredLevel: 4, priority: 1}]->(s)</query>
		<query>MATCH (u:User {userName: 'phin'}), (s:Skill {name: 'Project Management'}) CREATE (u)-[:RELATED_TO {currentLevel: 3, desiredLevel: 4, priority: 1}]->(s)</query>
		<query>MATCH (u:User {userName: 'us1'}), (s:Skill {name: 'Spring Boot'}) CREATE (u)-[:RELATED_TO {currentLevel: 2, desiredLevel: 3, priority: 2}]->(s)</query>
		<query>MATCH (u:User {userName: 'us2'}), (s:Skill {name: 'Spring Boot'}) CREATE (u)-[:RELATED_TO {currentLevel: 2, desiredLevel: 3, priority: 2}]->(s)</query>
		<query>MATCH (u:User {userName: 'us3'}), (s:Skill {name: 'Spring Boot'}) CREATE (u)-[:RELATED_TO {currentLevel: 2, desiredLevel: 3, priority: 2}]->(s)</query>

		<query>CREATE (:Project {id: randomUUID(), name: 'SKOOP', creationDate: toString(localdatetime()), lastModifiedDate: toString(localdatetime()),
			description: 'SKOOP project is intended to encourage knowledge sharing between employees of a company and help to organize communities of different interests.',
			customer: 'SKOOP team', industrySector: 'IT industry'})</query>

		<query>CREATE (c:Community {id: randomUUID(), title: 'SKOOP developers',
			description: 'The community for the developers taking part in SKOOP project.',
			type: 'OPEN', creationDate: toString(localdatetime()), lastModifiedDate: toString(localdatetime())})</query>

		<query>CREATE (c:Community {id: randomUUID(), title: 'Dmitry\'s community',
			description: 'Dmitry\'s closed community.',
			type: 'CLOSED', creationDate: toString(localdatetime()), lastModifiedDate: toString(localdatetime())})</query>

		<query>CREATE (c:Community {id: randomUUID(), title: 'Sveta\'s community',
			description: 'Sveta\'s closed community.',
			type: 'CLOSED', creationDate: toString(localdatetime()), lastModifiedDate: toString(localdatetime())})</query>

		<query>CREATE (c:Community {id: randomUUID(), title: 'Franziska\'s community',
			description: 'Franziska\'s closed community.',
			type: 'CLOSED', creationDate: toString(localdatetime()), lastModifiedDate: toString(localdatetime())})</query>

		<query>CREATE (c:Community {id: randomUUID(), title: 'Rainer\'s community',
			description: 'Rainer\'s closed community.',
			type: 'CLOSED', creationDate: toString(localdatetime()), lastModifiedDate: toString(localdatetime())})</query>

		<query>CREATE (c:Community {id: randomUUID(), title: 'Phoebe\'s community',
			description: 'Phoebe\'s closed community.',
			type: 'CLOSED', creationDate: toString(localdatetime()), lastModifiedDate: toString(localdatetime())})</query>

		<query>MATCH (c:Community {title: 'SKOOP developers'}), (s:Skill {name: 'Spring Boot'}) CREATE (c)-[:RELATES_TO]->(s)</query>
		<query>MATCH (c:Community {title: 'SKOOP developers'}), (s:Skill {name: 'Java'}) CREATE (c)-[:RELATES_TO]->(s)</query>

		<query>MATCH (c:Community {title: 'Sveta\'s community'}), (s:Skill {name: 'Spring Boot'}) CREATE (c)-[:RELATES_TO]->(s)</query>

		<query>MATCH (c:Community {title: 'SKOOP developers'}), (u:User {userName: 'frwt'})
			CREATE (u)-[:COMMUNITY_USER {role: 'MANAGER', creationDate: toString(localdatetime()), lastModifiedDate: toString(localdatetime())}]->(c)</query>

		<query>MATCH (c:Community {title: 'Dmitry\'s community'}), (u:User {userName: 'dmle'})
			CREATE (u)-[:COMMUNITY_USER {role: 'MANAGER', creationDate: toString(localdatetime()), lastModifiedDate: toString(localdatetime())}]->(c)</query>

		<query>MATCH (c:Community {title: 'Sveta\'s community'}), (u:User {userName: 'sviv'})
			CREATE (u)-[:COMMUNITY_USER {role: 'MANAGER', creationDate: toString(localdatetime()), lastModifiedDate: toString(localdatetime())}]->(c)</query>

		<query>MATCH (c:Community {title: 'Franziska\'s community'}), (u:User {userName: 'frwt'})
			CREATE (u)-[:COMMUNITY_USER {role: 'MANAGER', creationDate: toString(localdatetime()), lastModifiedDate: toString(localdatetime())}]->(c)</query>

		<query>MATCH (c:Community {title: 'Rainer\'s community'}), (u:User {userName: 'rju'})
			CREATE (u)-[:COMMUNITY_USER {role: 'MANAGER', creationDate: toString(localdatetime()), lastModifiedDate: toString(localdatetime())}]->(c)</query>

		<query>MATCH (c:Community {title: 'Phoebe\'s community'}), (u:User {userName: 'phin'})
			CREATE (u)-[:COMMUNITY_USER {role: 'MANAGER', creationDate: toString(localdatetime()), lastModifiedDate: toString(localdatetime())}]->(c)</query>

		<query><![CDATA[ MATCH (p:Project {name: 'SKOOP'}), (u:User {userName: 'dmle'}), (s:Skill {name: 'Spring Boot'})
			CREATE (u)<-[:USER]-(up:UserProject {id: randomUUID(), role: 'Developer', tasks: 'Development and testing.', startDate: '2019-01-09', endDate: '2019-03-31',
			creationDate: toString(localdatetime()), lastModifiedDate: toString(localdatetime())})-[:PROJECT]->(p), (up)-[:REFERS_TO_SKILL]->(s) ]]></query>

		<query><![CDATA[ MATCH (p:Project {name: 'SKOOP'}), (u:User {userName: 'sviv'}), (s:Skill {name: 'CSS'})
			CREATE (u)<-[:USER]-(up:UserProject {id: randomUUID(), role: 'Developer', tasks: 'Development and testing.', startDate: '2019-01-09', endDate: '2019-03-31',
			creationDate: toString(localdatetime()), lastModifiedDate: toString(localdatetime())})-[:PROJECT]->(p), (up)-[:REFERS_TO_SKILL]->(s) ]]></query>

		<query><![CDATA[ MATCH (p:Project {name: 'SKOOP'}), (u:User {userName: 'frwt'}), (s:Skill {name: 'Project Management'})
			CREATE (u)<-[:USER]-(up:UserProject {id: randomUUID(), role: 'Product owner', tasks: 'Product ownership and declaring of requirements.', startDate: '2019-01-09', endDate: '2019-03-31',
			creationDate: toString(localdatetime()), lastModifiedDate: toString(localdatetime())})-[:PROJECT]->(p), (up)-[:REFERS_TO_SKILL]->(s) ]]></query>

		<query><![CDATA[ MATCH (p:Project {name: 'SKOOP'}), (u:User {userName: 'rju'}), (s:Skill {name: 'Project Management'})
			CREATE (u)<-[:USER]-(up:UserProject {id: randomUUID(), role: 'Project manager', tasks: 'Project management.', startDate: '2019-01-09', endDate: '2019-03-31',
			creationDate: toString(localdatetime()), lastModifiedDate: toString(localdatetime())})-[:PROJECT]->(p), (up)-[:REFERS_TO_SKILL]->(s) ]]></query>

		<query><![CDATA[ MATCH (p:Project {name: 'SKOOP'}), (u:User {userName: 'phin'}), (s:Skill {name: 'Project Management'})
			CREATE (u)<-[:USER]-(up:UserProject {id: randomUUID(), role: 'Project manager', tasks: 'Project management.', startDate: '2019-01-09', endDate: '2019-03-31',
			creationDate: toString(localdatetime()), lastModifiedDate: toString(localdatetime())})-[:PROJECT]->(p), (up)-[:REFERS_TO_SKILL]->(s) ]]></query>

		<query>CREATE (:Link {name: 'GitHub WebApp Repository', href: 'https://github.com/T-Systems-MMS/skoop-webapp'})</query>
		<query>CREATE (:Link {name: 'GitHub Deployment Repository', href: 'https://github.com/T-Systems-MMS/skoop-deployment'})</query>
		<query>CREATE (:Link {name: 'SonarCloud Server Report', href: 'https://sonarcloud.io/dashboard?id=T-Systems-MMS_skoop-server'})</query>
		<query>CREATE (:Link {name: 'SonarClour WebApp Report', href: 'https://sonarcloud.io/dashboard?id=T-Systems-MMS_skoop-webapp'})</query>
		<query>CREATE (:Link {name: 'Travis CI WebApp', href: 'https://travis-ci.org/T-Systems-MMS/skoop-webapp'})</query>
		<query>CREATE (:Link {name: 'Travis CI Server', href: 'https://travis-ci.org/T-Systems-MMS/skoop-server'})</query>
		<query>CREATE (:Link {name: 'CodeCov Server', href: 'https://codecov.io/gh/T-Systems-MMS/skoop-server'})</query>
		<query>CREATE (:Link {name: 'GitHub Server Repository', href: 'https://github.com/T-Systems-MMS/skoop-server'})</query>
		<query>CREATE (:Link {name: 'CodeCov WebApp', href: 'https://codecov.io/gh/T-Systems-MMS/skoop-webapp'})</query>

		<query>MATCH (c:Community {title: 'SKOOP developers'}), (l:Link {name: 'GitHub WebApp Repository'}) CREATE (c)-[:HAS_LINK]->(l)</query>
		<query>MATCH (c:Community {title: 'SKOOP developers'}), (l:Link {name: 'GitHub Deployment Repository'}) CREATE (c)-[:HAS_LINK]->(l)</query>
		<query>MATCH (c:Community {title: 'SKOOP developers'}), (l:Link {name: 'SonarCloud Server Report'}) CREATE (c)-[:HAS_LINK]->(l)</query>
		<query>MATCH (c:Community {title: 'SKOOP developers'}), (l:Link {name: 'SonarClour WebApp Report'}) CREATE (c)-[:HAS_LINK]->(l)</query>
		<query>MATCH (c:Community {title: 'SKOOP developers'}), (l:Link {name: 'Travis CI WebApp'}) CREATE (c)-[:HAS_LINK]->(l)</query>
		<query>MATCH (c:Community {title: 'SKOOP developers'}), (l:Link {name: 'Travis CI Server'}) CREATE (c)-[:HAS_LINK]->(l)</query>
		<query>MATCH (c:Community {title: 'SKOOP developers'}), (l:Link {name: 'CodeCov Server'}) CREATE (c)-[:HAS_LINK]->(l)</query>
		<query>MATCH (c:Community {title: 'SKOOP developers'}), (l:Link {name: 'GitHub Server Repository'}) CREATE (c)-[:HAS_LINK]->(l)</query>
		<query>MATCH (c:Community {title: 'SKOOP developers'}), (l:Link {name: 'CodeCov WebApp'}) CREATE (c)-[:HAS_LINK]->(l)</query>
	</changeset>
</changelog>
